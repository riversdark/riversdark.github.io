---
title: Protein contact map modeling with Potts models
author: "Olivier Ma"
date: "2024-07-08"
jupyter: torch
format: pdf
---

## Introducing PDB data 

The Protein Data Bank (PDB) file format is a standard for the representation of macromolecular structures. It is widely used in the field of bioinformatics and structural biology to store and share detailed information about the 3D structures of proteins, nucleic acids, and complex assemblies. Each PDB file contains a wealth of information, including the sequence of amino acids or nucleotides, the spatial coordinates of each atom, and metadata about the experiment used to determine the structure.

The sequence information in a PDB file provides the linear order of amino acids in a protein or nucleotides in a nucleic acid, which is crucial for understanding the primary structure of the molecule. The structural information, on the other hand, includes the 3D coordinates of each atom, allowing researchers to visualize and analyze the molecule's tertiary and quaternary structures. This combination of sequence and structure data makes PDB files an invaluable resource for studying the relationship between a molecule's structure and its function.

Individual PDB files can be downloaded from the [RCSB PDB](https://www.rcsb.org/) website.

``` {python}
import requests

def download_pdb(pdb_id, filename):
    url = f'https://files.rcsb.org/download/{pdb_id}.pdb'
    response = requests.get(url)
    if response.status_code == 200:
        with open(filename, 'wb') as file:
            file.write(response.content)
        print(f'{pdb_id} downloaded successfully as {filename}')
    else:
        print(f'Failed to download {pdb_id}')

# Download the 6oim protein
download_pdb('6oim', '6oim.pdb')
```

## The CATH40 dataset 

## Extracting sequence info from PDB 

The process of extracting sequence information from a PDB file involves identifying the specific chains within the protein structure. Each PDB file can contain multiple chains, representing different polypeptide sequences or nucleic acid strands within the macromolecular complex. By specifying the chain identifier, researchers can isolate and analyze the sequence of a particular chain, which is essential for understanding the structure-function relationship of the protein or nucleic acid.

extract the sequence information from a specified chain within a PDB file.


``` {python}
from Bio.PDB import PDBParser
from Bio.SeqUtils import seq1

def extract_sequence_from_pdb(pdb_filename, chain_id):
    parser = PDBParser()
    structure = parser.get_structure('protein', pdb_filename)
    sequence = []

    for model in structure:
        for chain in model:
            if chain.id == chain_id:
                for residue in chain:
                    if residue.id[0] == ' ':
                        sequence.append(seq1(residue.resname))

    return ''.join(sequence)

# Example usage
sequence = extract_sequence_from_pdb('6oim.pdb', 'A')
print(f'Sequence: {sequence}')
print(f'Length: {len(sequence)}')
```

save the sequence to a fasta file

``` {python}
def write_sequence_to_fasta(sequence, output_file):
    with open(output_file, 'w') as file:
        file.write(f'>sequence\n{sequence}')

write_sequence_to_fasta(sequence, 'output_sequence.fasta')
```


## Multiple sequence alignment 

Multiple sequence alignment (MSA) aligns multiple sequences to identify conserved regions and infer evolutionary relationships.

If we have multiple sequences, we can use MSA tools to align these sequences. 
If we have a single sequence, we can use MSA tools to align this sequence to a database of sequences.

Here we use command line tool [mmseqs2](https://github.com/soedinglab/mmseqs2) tool to align the sequences using the [Swiss-Prot database](https://www.swissprot.org/). (both the tools and the database can be modified.)

The database can be downloaded with 
``` bash
mmseqs databases UniProtKB/Swiss-Prot swissprot tmp
```

and we can create a MSA search

``` {python}
import os

def run_mmseqs2_search(fasta_file, output_dir, database):

    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    mmseqs2_command = f"mmseqs easy-search {fasta_file} {database} {output_dir}/alnRes.m8 {output_dir}/tmp --alignment-mode 3 --format-output 'query,target,qaln,taln'"
    os.system(mmseqs2_command)
    
    print(f'Search completed. Results are in {output_dir}/alnRes.m8')

run_mmseqs2_search('output_sequence.fasta', 'mmseqs2_output', 'swissprot')
```

the result will be a file with the following format

``` {python}
with open('mmseqs2_output/alnRes.m8', 'r') as file:
    line = file.readline()
    print(*line.split(), sep='\n')
```

we have the sequence ID, together with the target sequence and the aligned sequence.

## Extracting contact info from PDB 

we are using 8 Ã… as the distance threshold for contact. This is a reasonable cutoff for protein contact, but can be adjusted based on the specific use case or experiment.

``` {python}
import numpy as np
from Bio.PDB import PDBParser, is_aa

def generate_contact_map(pdb_filename, chain_id, distance_threshold=8.0):
    parser = PDBParser()
    structure = parser.get_structure('protein', pdb_filename)
    model = structure[0]
    chain = model[chain_id]
    
    # Get the list of alpha carbon atoms
    ca_atoms = [residue['CA'] for residue in chain if is_aa(residue)]
    
    num_residues = len(ca_atoms)
    contact_map = np.zeros((num_residues, num_residues), dtype=int)
    
    for i, atom1 in enumerate(ca_atoms):
        for j, atom2 in enumerate(ca_atoms):
            if i != j:
                distance = atom1 - atom2
                if distance <= distance_threshold:
                    contact_map[i, j] = 1
    
    return contact_map

# Example usage
contact_map = generate_contact_map('6oim.pdb', 'A')
print(contact_map)
```

plot the contact map

``` {python}
import matplotlib.pyplot as plt

plt.imshow(contact_map, cmap='binary')
plt.show()
```

And our goal in Potts modeling is to predict the contact map from the sequence and the MSA.


## Gibbs Sampling for Ising Models

The Ising model represents a system where each site can be in one of two states, typically $+1$ or $-1$. The energy function of the Ising model with only edge potentials is given by:

$$
\mathcal{E}(\mathbf{x}; J) = -J \sum_{i \sim j} x_i x_j
$$

Where:

- $J$ is the interaction strength between neighboring spins.
- $x_i$ represents the state of site $i$.
- The summation $\sum_{i \sim j}$ runs over all pairs of neighboring sites.

The corresponding probability density function is:

$$
p(\mathbf{x}|\theta) = \frac{1}{Z(J)} \exp(-\mathcal{E}(\mathbf{x}; J))
$$

Substituting the energy function, we get:

$$
p(\mathbf{x}|\theta) = \frac{1}{Z(J)} \exp\left(J \sum_{i \sim j} x_i x_j\right)
$$

To express this in a product form, we note that:

$$
\exp\left(J \sum_{i \sim j} x_i x_j\right) = \prod_{i \sim j} \exp(J x_i x_j)
$$

Thus, the probability density function can be rewritten as:

$$
p(\mathbf{x}|\theta) = \frac{1}{Z(J)} \prod_{i \sim j} \exp(J x_i x_j)
$$

Where:
- $\psi_{ij}(x_i, x_j; \theta) = \exp(J x_i x_j)$


For Gibbs sampling, we need the full conditional distribution of each site $x_i$ given the states of all other sites $x_{-i}$. The full conditional distribution for $x_i = +1$ is:

$$
p(x_i = +1 | x_{-i}) = \frac{\prod_{j \in \text{nbr}(i)} \psi_{ij}(x_i = +1, x_j)}{\prod_{j \in \text{nbr}(i)} \psi_{ij}(x_i = +1, x_j) + \prod_{j \in \text{nbr}(i)} \psi_{ij}(x_i = -1, x_j)}
$$

Given $\psi(x_i, x_j) = \exp(J x_i x_j)$, substituting this into the full conditional distribution:

$$
p(x_i = +1 | x_{-i}) = \frac{\exp\left(J \sum_{j \in \text{nbr}(i)} x_j\right)}{\exp\left(J \sum_{j \in \text{nbr}(i)} x_j\right) + \exp\left(-J \sum_{j \in \text{nbr}(i)} x_j\right)}
$$

Let $\eta_i = \sum_{j \in \text{nbr}(i)} x_j$, which is the sum of the states of the neighbors of site $i$. Thus, the full conditional distribution simplifies to:

$$
p(x_i = +1 | x_{-i}) = \frac{\exp(J \eta_i)}{\exp(J \eta_i) + \exp(-J \eta_i)}
$$

## Gibbs Sampling for Potts Models

The Potts model generalizes the Ising model to $q$ states. The energy function is:

$$
\mathcal{E}(\mathbf{x}) = -J \sum_{i \sim j} \mathbb{I}(x_i = x_j)
$$

Where $\mathbb{I}$ is the indicator function that is 1 when $x_i = x_j$ and 0 otherwise.

The corresponding probability density function is:

$$
p(\mathbf{x}) = \frac{1}{Z} \exp(-\mathcal{E}(\mathbf{x}))
$$

Substituting the energy function, we get:

$$
p(\mathbf{x}) = \frac{1}{Z} \exp\left(J \sum_{i \sim j} \mathbb{I}(x_i = x_j)\right)
$$

For the full conditional distribution in the Potts model:

$$
p(x_i = k | x_{-i}) = \frac{\exp\left(J \sum_{n \in \text{nbr}(i)} \mathbb{I}(x_n = k)\right)}{\sum_{k'} \exp\left(J \sum_{n \in \text{nbr}(i)} \mathbb{I}(x_n = k')\right)}
$$

Letting $\eta_i^k = \sum_{n \in \text{nbr}(i)} \mathbb{I}(x_n = k)$, we get:

$$
p(x_i = k | x_{-i}) = \frac{\exp(J \eta_i^k)}{\sum_{k'} \exp(J \eta_i^{k'})}.
$$
